// Generated automatically by nearley, version 2.19.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "Main$ebnf$1", "symbols": []},
    {"name": "Main$ebnf$1$subexpression$1", "symbols": ["Comment"]},
    {"name": "Main$ebnf$1$subexpression$1", "symbols": ["nl_"]},
    {"name": "Main$ebnf$1", "symbols": ["Main$ebnf$1", "Main$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Main$ebnf$2", "symbols": []},
    {"name": "Main$ebnf$2$subexpression$1", "symbols": ["Comment"]},
    {"name": "Main$ebnf$2$subexpression$1", "symbols": ["nl_"]},
    {"name": "Main$ebnf$2", "symbols": ["Main$ebnf$2", "Main$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Main", "symbols": ["Main$ebnf$1", "Program", "Main$ebnf$2"]},
    {"name": "Program", "symbols": ["FirstBlock"]},
    {"name": "Program", "symbols": ["Program", "DotBlock"]},
    {"name": "FirstBlock", "symbols": ["Flow"]},
    {"name": "DotBlock$subexpression$1$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DotBlock$subexpression$1", "symbols": ["DotBlock$subexpression$1$string$1"]},
    {"name": "DotBlock$subexpression$1$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"d"}, {"literal":"u"}, {"literal":"c"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DotBlock$subexpression$1", "symbols": ["DotBlock$subexpression$1$string$2"]},
    {"name": "DotBlock$subexpression$1$string$3", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"o"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DotBlock$subexpression$1", "symbols": ["DotBlock$subexpression$1$string$3"]},
    {"name": "DotBlock", "symbols": [{"literal":"."}, "DotBlock$subexpression$1", "Flow"]},
    {"name": "DotBlock$string$1", "symbols": [{"literal":"."}, {"literal":"b"}, {"literal":"r"}, {"literal":"a"}, {"literal":"n"}, {"literal":"c"}, {"literal":"h"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "DotBlock", "symbols": ["DotBlock$string$1", "FlowList", {"literal":")"}]},
    {"name": "FlowList", "symbols": ["ws", "Flow", "ws"]},
    {"name": "FlowList", "symbols": ["FlowList", {"literal":","}, "ws", "Flow", "ws"]},
    {"name": "Flow$ebnf$1", "symbols": ["FlowSteps"], "postprocess": id},
    {"name": "Flow$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Flow", "symbols": [{"literal":"("}, "Flow$ebnf$1", "ws", {"literal":")"}]},
    {"name": "FlowSteps", "symbols": ["ws", "FlowStep"]},
    {"name": "FlowSteps", "symbols": ["FlowSteps", "ws", "FlowStep"]},
    {"name": "FlowStep", "symbols": ["Request"]},
    {"name": "FlowStep", "symbols": ["Parse"]},
    {"name": "FlowStep", "symbols": ["Comment"]},
    {"name": "FlowStep", "symbols": ["Input"]},
    {"name": "FlowStep", "symbols": ["Tag"]},
    {"name": "Input$string$1", "symbols": [{"literal":"I"}, {"literal":"N"}, {"literal":"P"}, {"literal":"U"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Input", "symbols": ["Input$string$1", "_", "Slug"]},
    {"name": "Tag$string$1", "symbols": [{"literal":"T"}, {"literal":"A"}, {"literal":"G"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Tag", "symbols": ["Tag$string$1", "_", "Slug"]},
    {"name": "Request$ebnf$1", "symbols": []},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$2$string$1", "symbols": [{"literal":"R"}, {"literal":"E"}, {"literal":"A"}, {"literal":"D"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$2", "symbols": ["Request$ebnf$1$subexpression$1$macrocall$2$string$1"]},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$3", "symbols": ["Boolean"]},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$1", "symbols": ["_", "Request$ebnf$1$subexpression$1$macrocall$2", {"literal":"="}, "Request$ebnf$1$subexpression$1$macrocall$3"]},
    {"name": "Request$ebnf$1$subexpression$1", "symbols": ["Request$ebnf$1$subexpression$1$macrocall$1"]},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$5$string$1", "symbols": [{"literal":"W"}, {"literal":"R"}, {"literal":"I"}, {"literal":"T"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$5", "symbols": ["Request$ebnf$1$subexpression$1$macrocall$5$string$1"]},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$6", "symbols": ["Boolean"]},
    {"name": "Request$ebnf$1$subexpression$1$macrocall$4", "symbols": ["_", "Request$ebnf$1$subexpression$1$macrocall$5", {"literal":"="}, "Request$ebnf$1$subexpression$1$macrocall$6"]},
    {"name": "Request$ebnf$1$subexpression$1", "symbols": ["Request$ebnf$1$subexpression$1$macrocall$4"]},
    {"name": "Request$ebnf$1", "symbols": ["Request$ebnf$1", "Request$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Request", "symbols": ["HttpVerb", "_", "Url", "Request$ebnf$1", "nl"]},
    {"name": "HttpVerb$string$1", "symbols": [{"literal":"G"}, {"literal":"E"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "HttpVerb", "symbols": ["HttpVerb$string$1"]},
    {"name": "HttpVerb$string$2", "symbols": [{"literal":"P"}, {"literal":"O"}, {"literal":"S"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "HttpVerb", "symbols": ["HttpVerb$string$2"]},
    {"name": "HttpVerb$string$3", "symbols": [{"literal":"P"}, {"literal":"U"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "HttpVerb", "symbols": ["HttpVerb$string$3"]},
    {"name": "HttpVerb$string$4", "symbols": [{"literal":"D"}, {"literal":"E"}, {"literal":"L"}, {"literal":"E"}, {"literal":"T"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "HttpVerb", "symbols": ["HttpVerb$string$4"]},
    {"name": "Url", "symbols": ["StringTemplate"]},
    {"name": "Parse$string$1", "symbols": [{"literal":"P"}, {"literal":"A"}, {"literal":"R"}, {"literal":"S"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Parse$ebnf$1", "symbols": []},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$2$string$1", "symbols": [{"literal":"A"}, {"literal":"T"}, {"literal":"T"}, {"literal":"R"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$2", "symbols": ["Parse$ebnf$1$subexpression$1$macrocall$2$string$1"]},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$3", "symbols": ["Attribute"]},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$1", "symbols": ["_", "Parse$ebnf$1$subexpression$1$macrocall$2", {"literal":"="}, "Parse$ebnf$1$subexpression$1$macrocall$3"]},
    {"name": "Parse$ebnf$1$subexpression$1", "symbols": ["Parse$ebnf$1$subexpression$1$macrocall$1"]},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$5$string$1", "symbols": [{"literal":"M"}, {"literal":"A"}, {"literal":"X"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$5", "symbols": ["Parse$ebnf$1$subexpression$1$macrocall$5$string$1"]},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$6", "symbols": ["Number"]},
    {"name": "Parse$ebnf$1$subexpression$1$macrocall$4", "symbols": ["_", "Parse$ebnf$1$subexpression$1$macrocall$5", {"literal":"="}, "Parse$ebnf$1$subexpression$1$macrocall$6"]},
    {"name": "Parse$ebnf$1$subexpression$1", "symbols": ["Parse$ebnf$1$subexpression$1$macrocall$4"]},
    {"name": "Parse$ebnf$1", "symbols": ["Parse$ebnf$1", "Parse$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Parse", "symbols": ["Parse$string$1", "_", "Selector", "Parse$ebnf$1", "nl"]},
    {"name": "Selector", "symbols": ["StringTemplate"]},
    {"name": "Attribute", "symbols": ["StringTemplate"]},
    {"name": "StringTemplate$macrocall$2$ebnf$1", "symbols": []},
    {"name": "StringTemplate$macrocall$2$ebnf$1", "symbols": ["StringTemplate$macrocall$2$ebnf$1", /[^'\n\r]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "StringTemplate$macrocall$2", "symbols": ["StringTemplate$macrocall$2$ebnf$1"]},
    {"name": "StringTemplate$macrocall$1", "symbols": [{"literal":"'"}, "StringTemplate$macrocall$2", {"literal":"'"}], "postprocess": quoted => quoted[1][0].join('')},
    {"name": "StringTemplate", "symbols": ["StringTemplate$macrocall$1"]},
    {"name": "Slug$macrocall$2$ebnf$1", "symbols": []},
    {"name": "Slug$macrocall$2$ebnf$1", "symbols": ["Slug$macrocall$2$ebnf$1", /[a-zA-Z0-9-]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Slug$macrocall$2", "symbols": ["Slug$macrocall$2$ebnf$1"]},
    {"name": "Slug$macrocall$1", "symbols": [{"literal":"'"}, "Slug$macrocall$2", {"literal":"'"}], "postprocess": quoted => quoted[1][0].join('')},
    {"name": "Slug", "symbols": ["Slug$macrocall$1"]},
    {"name": "Number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "Number$ebnf$1", "symbols": ["Number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Number", "symbols": ["Number$ebnf$1"]},
    {"name": "Boolean$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Boolean", "symbols": ["Boolean$string$1"]},
    {"name": "Boolean$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Boolean", "symbols": ["Boolean$string$2"]},
    {"name": "Comment$ebnf$1", "symbols": []},
    {"name": "Comment$ebnf$1", "symbols": ["Comment$ebnf$1", /[^\n\r]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Comment", "symbols": [{"literal":"#"}, "Comment$ebnf$1", "nl"], "postprocess": () => "COMMENT"},
    {"name": "ws$ebnf$1", "symbols": []},
    {"name": "ws$ebnf$1", "symbols": ["ws$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ws", "symbols": ["ws$ebnf$1"], "postprocess": () => null},
    {"name": "_$ebnf$1", "symbols": [{"literal":" "}]},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", {"literal":" "}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null},
    {"name": "nl", "symbols": [/[\r\n]/], "postprocess": () => 'nl'},
    {"name": "nl_$ebnf$1", "symbols": []},
    {"name": "nl_$ebnf$1", "symbols": ["nl_$ebnf$1", {"literal":" "}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "nl_", "symbols": [/[\r\n]/, "nl_$ebnf$1"], "postprocess": () => 'nl'}
]
  , ParserStart: "Main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
